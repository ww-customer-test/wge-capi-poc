# This file contains configuration information for creating and
# managing a wkp cluster. The contents of the file are used by the `wk` command
# to:
#   - create a Kubernetes cluster
#   - set up a GitOps workflow
#   - deploy cluster components selected in `components.js`
#
# General configuration comes first. Configuration values specific to
# particular cluster types and environments are found in separate
# subsections below.
# The file is initially set up with values that will create a
# footloose development or test cluster with 1 master and 1 worker
# running on docker containers.

# Defines the cluster `track`, which is a combination of the type of
# cluster being created and how machines are provided. Choices are:
#   - eks
#   - wks-ssh
#   - wks-footloose
#   - wks-components
#
# EKS managed clusters may be created by choosing `eks`.
#
# Clusters on bare metal may be created by selecting `wks-ssh`.
#
# Local test or development clusters may be created by selecting `wks-footloose`.
#
# If you already have a cluster and would like to install WKP's gitops system and cluster components, select `wks-components`.
#
# The difference between `wks-ssh` and `wks-footloose` is that the `wks-ssh` track
# creates a cluster on top of a set of machines provided by the user
# while the `wks-footloose` track creates its own set of ignite VMs or docker
# containers to act as the machines for the cluster. A standard docker
# installation will support the use of docker containers;
# see: https://ignite.readthedocs.io/en/stable/installation.html
# for ignite requirements.
#
# If the `wks-ssh` track is chosen, IP addresses, ports, and roles (master/worker)
# must be specified for the machines that will make up the cluster as well as
# an SSH key for a user that has passwordless sudo permissions for each machine.
# Value must be one of: `eks`, `wks-ssh`, `wks-footloose` or `wks-components`
# [REQUIRED]
track: wks-components

# Name of the cluster being created.
# If no `gitUrl` value (below) is provided, the `clusterName` will be the name
# of the repo created by WKP (together with the `gitProviderOrg` value below)
#
# If left blank, defaults to: `wk-${USER}`
# Value must be 1-100 characters matching the pattern:
#   '[a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*'
clusterName: 'CLUSTER_NAME'

# `github` or `gitlab`
# [REQUIRED]
gitProvider: github

# Providing a `gitUrl` will bypass automatic repo creation
# (and thereby bypass the `gitProviderOrg` value above).
#
# If you already have a remote git repo with configured ssh keys, used this value.
#
# !IMPORTANT! only ssh git urls are supported:
# e.g. `git@git.acme.com:app-team/dev-cluster.git`
gitUrl: 'GIT_URL'

# Name of docker hub user for fetching images
# [REQUIRED]
dockerIOUser: 'pcarlton'

# Path to a file containing password for docker hub user account
# [REQUIRED]
dockerIOPasswordFile: 'CREDS_DIR/dockerhub-password'

# Path to a certificate used to encrypt sealed secrets.
# If left blank a self signed certificate will be created.
# Provide absolute path or relative from the directory of this config.yaml file
sealedSecretsCertificate: 'CLONE_DIR/setup/sealed-secrets-cert.crt'

# Path to a private key used to decrypt sealed secrets.
# If left blank a new private key will be created.
# Provide absolute path or relative from the directory of this config.yaml file
sealedSecretsPrivateKey: 'CLONE_DIR/setup/sealed-secrets-key'

# Map with WKP features that are enabled in the cluster.
# To apply changes made here, commit and push the
# updated config.yaml file to the cluster repository.
enabledFeatures:
  teamWorkspaces: false
  fleetManagement: false

# Storage configuration for the fleet management database
# Supported databases: `sqlite`, `postgres`
fleetManagementDB:
  databaseType: sqlite
  databaseURI: '/var/database/mccp.db'
  # Applies only if databaseType = sqlite
  sqliteConfig:
    hostPathVolume: true
    path: '/home/wks/database'
    persistentVolumeClaim: false
  # Applies only if databaseType = postgres
  # To provide a user and password, refer to our user-guide at
  # the MCCP Database Configuration page.
  postgresConfig:
    databaseName: postgres

#
# EKS-specific configuration
# (only required when `track` is set to `eks`)
#
eksConfig:
  # Indicates whether to deploy an ALB and Ingress Controller for WKP UI.
  # If you specify an eksctl config file below, make sure
  # to enable IAM roles for ALB in that file.
  # Must be a boolean (without quotes): true or false.
  uiALBIngress: false

  # Loads configuration from an eksctl config file.
  # A sample eksctl config can be found in eksctl-config.yaml.
  # If a relative path is provided, it is calculated from the setup dir,
  # e.g. configFilePath: ./eksctl-config.yaml
  # If provided, the fields below this will not be applied.
  configFilePath: ""

  # AWS region in which to create the cluster
  # [REQUIRED]
  clusterRegion: eu-west-3

  # Defines the version of Kubernetes installed on each node.
  # Supported versions: `'1.16'`, `'1.17'`, `'1.18'`, `'1.19'`
  # friendly reminder to use quotes to ensure this value is a YAML string.
  # [REQUIRED]
  kubernetesVersion: '1.18'

  # Description of the desired node groups. Each node group spec consists of:
  #   - name: <string>. If unspecified, defaults to `ng-<node group index>`
  #     instanceType: <valid AWS machine instance type>. If unspecified,
  #       defaults to: `m5.large`
  #     desiredCapacity: <integer>. If unspecified, defaults to 3.
  # If no node groups are specified, a single node group names `ng-1` with a
  #  capacity of 3 and an instanceType of `m5.large` will be created.
  nodeGroups: []

  # Path to a file containing the managed node group specifications
  # inside of the cluster/platform directory.
  # The file will be included verbatim in the generated EKS config.
  # No validity checking will be performed prior to invoking `eksctl`.
  # If left blank, no managed node groups wil be created.
  managedNodeGroupFile: ''

#
# Configuration for clusters not hosted in EKS
#
wksConfig:
  # Defines the version of Kubernetes installed on each node.
  # Must be: `'1.16.x'`-`'1.20.x'`
  # friendly reminder to use quotes to ensure this value is a YAML string.
  # Change this value and run `wk upgrade` to upgrade your cluster.
  # [REQUIRED]
  kubernetesVersion: '1.19.7'

  # Specifies the range of address available for services.
  # Value is an array of CIDRs.
  # [REQUIRED]
  serviceCIDRBlocks: [10.96.0.0/12]

  # Specifies the range of address available for pods.
  # Value is an array of CIDRs.
  # [REQUIRED]
  podCIDRBlocks: [192.168.0.0/16]

  # Point the control plane lb to a custom domain or IP of your load balancer (optional)
  controlPlaneLbAddress: ''

  # Pass extra arguments to the Kubernetes api server. Each argument
  # consists of two strings, a name and a value:
  # - name: <argument name>
  #   value: <argument value>
  apiServerArguments: []

  # Pass extra arguments to the Kubelet on each node. Each argument
  # consists of a name and a value:
  # - name: <argument name - string>
  #   value: <argument value - string>
  kubeletArguments: []

  # Minimum disk space in GB
  # that is required for the cluster to be installed
  minDiskSpace: 20

  #
  # SSH-specific configuration
  # (only required when `track` is set to `wks-ssh`)
  #
  sshConfig:
    # User name to be used when accessing cluster machines via
    # ssh. The user must have 'sudo' privileges on each machine in the
    # cluster. If left blank, defaults to: `root`
    sshUser: 'root'

    # Path to SSH key file containing private key which provides access to
    # the cluster machines. The key must correspond to a user with sudo
    # permission.
    # In the `wks-ssh` track, if left blank, defaults to `~/.ssh/id_rsa`.
    # In the `wks-footloose` track, if left blank, a new key pair will be created at
    # setup/cluster-key and setup/cluster-key.pub.
    sshKeyFile: ''

    # An array of machine specs for all machines provided to the cluster.
    # A machine spec consists of:
    #
    #   # [REQUIRED]
    # - role: `<one of: master, worker>`
    #
    #   # [REQUIRED]
    #   publicAddress: `<IP address>`
    #
    #   # If left blank, defaults to `<role>-<public IP>`
    #   # can be a maximum of 253 characters
    #   name: `<'^[0-9A-Za-z][A-Za-z0-9\-.]*[0-9A-Za-z]'>`
    #
    #   # If left blank, defaults to `22`
    #   publicPort: `<SSH port value (integer)>`
    #
    #   # If left blank, defaults to the value of `publicAddress`
    #   privateAddress: `<IP address>`
    #
    #   # If left blank, defaults to the value of `publicPort`
    #   privatePort: `<SSH port value (integer)>`
    #
    # [REQUIRED]
    machines: []

  #
  # Footloose-specific configuration
  # (only required when `track` is set to `wks-footloose`)
  #
  footlooseConfig:
    # How to create machines underpinning Kubernetes nodes
    #  - docker: use containers as `VMs`:
    #      https://github.com/weaveworks/footloose
    #  - ignite: use ignite and firecracker to create real VMs:
    #      https://github.com/weaveworks/ignite
    # Note that `ignite` can only be used on Linux as it requires KVM
    # [REQUIRED]
    backend: docker

    # Number of nodes allocated for the Kubernetes control plane
    # [REQUIRED]
    controlPlaneNodes: 1

    # Number of nodes allocated for worker nodes
    # [REQUIRED]
    workerNodes: 1

    # Footloose Image for creating Footloose cluster machines
    # Supported Images:
    # https://github.com/weaveworks/footloose#choosing-the-os-image-to-run
    # NOTE: fedora29, debian10, amazonlinuxs2 and clearlinux are not
    # supported for WKP at this time.
    # If left blank, defaults to quay.io/footloose/centos7
    image: ''
